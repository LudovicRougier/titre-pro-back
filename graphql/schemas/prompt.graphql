type Prompt {
    id: ID
    user_input: String!
    custom_answer: String!
    is_positive: Boolean
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
    main_emotion_translation: String
    sub_emotion_translation: String

    mainEmotion: Emotion
    subEmotion: Emotion
    user: User
    movies_related_to_emotions: [Media]!
    movies_related_to_topic: [Media]!
}

extend type Query {
    prompts(created_at: DateRange @whereBetween): [Prompt!] @paginate(defaultCount: 10) @whereAuth(relation: "user")
    prompt(id: ID! @eq): Prompt @find @whereAuth(relation: "user")
}

extend type Mutation {
    createPrompt(input: PromptInput!): Prompt
    deletePrompt(id: ID! @whereKey): Prompt @delete @whereAuth(relation: "user")
}

input PromptInput {
    user_input: String!
    is_personnalized: Boolean = false
    is_opposite: Boolean = false
}

input DateRange {
    from: DateTime!
    to: DateTime!
}
